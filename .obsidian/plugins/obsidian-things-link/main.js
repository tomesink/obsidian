/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ThingsLink
});
var import_obsidian = __toModule(require("obsidian"));
function getCurrentLine(editor, view) {
  const lineNumber = editor.getCursor().line;
  const lineText = editor.getLine(lineNumber);
  return lineText;
}
function prepareTask(line) {
  line = line.trim();
  line = line.replace(/^\W+|\W+$/, "");
  line = urlEncode(line);
  return line;
}
function urlEncode(line) {
  line = encodeURIComponent(line);
  return line;
}
function createProject(title, deepLink) {
  const project = `things:///add-project?title=${title}&notes=${deepLink}&x-success=obsidian://project-id`;
  window.open(project);
}
function createTask(line, deepLink) {
  const task = `things:///add?title=${line}&notes=${deepLink}&x-success=obsidian://task-id`;
  window.open(task);
}
var ThingsLink = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerObsidianProtocolHandler("project-id", (id) => __async(this, null, function* () {
        const projectID = id["x-things-id"];
        const workspace = this.app.workspace;
        const view = workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (view == null) {
          return;
        } else {
          const editor = view.editor;
          const thingsDeepLink = `things:///show?id=${projectID}`;
          let fileText = editor.getValue();
          const lines = fileText.split("\n");
          const h1Index = lines.findIndex((line) => line.startsWith("#"));
          if (h1Index !== -1) {
            let startRange = {
              line: h1Index,
              ch: lines[h1Index].length
            };
            let endRange = {
              line: h1Index,
              ch: lines[h1Index].length
            };
            editor.replaceRange(`

[Things](${thingsDeepLink})`, startRange, endRange);
          } else {
            let startRange = {
              line: 0,
              ch: 0
            };
            let endRange = {
              line: 0,
              ch: 0
            };
            editor.replaceRange(`[Things](${thingsDeepLink})

`, startRange, endRange);
          }
        }
      }));
      this.addCommand({
        id: "create-things-project",
        name: "Create Things Project",
        editorCallback: (editor, view) => {
          const workspace = this.app.workspace;
          const fileTitle = workspace.getActiveFile();
          if (fileTitle == null) {
            return;
          } else {
            let fileName = urlEncode(fileTitle.name);
            fileName = fileName.replace(/\.md$/, "");
            const obsidianDeepLink = this.app.getObsidianUrl(fileTitle);
            const encodedLink = urlEncode(obsidianDeepLink);
            createProject(fileName, encodedLink);
          }
        }
      });
      this.registerObsidianProtocolHandler("task-id", (id) => __async(this, null, function* () {
        const taskID = id["x-things-id"];
        const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (view == null) {
          return;
        } else {
          const editor = view.editor;
          const currentLine = getCurrentLine(editor, view);
          const firstLetterIndex = currentLine.search(/[a-zA-Z]|[0-9]/);
          const line = currentLine.substring(firstLetterIndex, currentLine.length);
          let editorPosition = view.editor.getCursor();
          const lineLength = view.editor.getLine(editorPosition.line).length;
          let startRange = {
            line: editorPosition.line,
            ch: firstLetterIndex
          };
          let endRange = {
            line: editorPosition.line,
            ch: lineLength
          };
          view.editor.replaceRange(`[${line}](things:///show?id=${taskID})`, startRange, endRange);
        }
      }));
      this.addCommand({
        id: "create-things-task",
        name: "Create Things Task",
        editorCallback: (editor, view) => {
          const workspace = this.app.workspace;
          const fileTitle = workspace.getActiveFile();
          if (fileTitle == null) {
            return;
          } else {
            let fileName = urlEncode(fileTitle.name);
            fileName = fileName.replace(/\.md$/, "");
            const obsidianDeepLink = this.app.getObsidianUrl(fileTitle);
            const encodedLink = urlEncode(obsidianDeepLink);
            const line = getCurrentLine(editor, view);
            const task = prepareTask(line);
            createTask(task, encodedLink);
          }
        }
      });
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
